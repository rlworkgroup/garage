#!/usr/bin/env bash
# This script installs garage on Linux distributions

### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

begins_with_short_option()
{
  local first_option all_short_options
  all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && \
    return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tf_gpu="off"

print_help ()
{
  printf '%s\n' "Installer of garage for Linux."
  printf 'Usage: %s [--(no-)tf-gpu] [--(no-)set-envvar] ' "$0"
  printf '[-h|--help] <mjkey-path>\n' "$0"
  printf '\t%s\n' "<mjkey-path>: Path of the MuJoCo key"
  printf '\t%s' "--tf-gpu,--no-tf-gpu: Install TensorFlow GPU instead of the "
  printf '%s\n' "regular version (off by default)"
  printf '\t%s' "--set-envvar,--no-set-envvar: Set environment variables "
  printf '%s\n' "required by garage in .bashrc (off by default)"
  printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --no-tf-gpu|--tf-gpu)
        _arg_tf_gpu="on"
        test "${1:0:5}" = "--no-" && _arg_tf_gpu="off"
        ;;
      --no-set-envvar|--set-envvar)
        _arg_set_envvar="on"
        test "${1:0:5}" = "--no-" && _arg_set_envvar="off"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _positionals+=("$1")
        ;;
    esac
    shift
  done
}


handle_passed_args_count ()
{
  _required_args_string="'mjkey-path'"
  error_msg="$(echo "FATAL ERROR: Not enough positional arguments - we" \
    "require exactly 1 (namely: $_required_args_string), but got only" \
    "${#_positionals[@]}.")"
  test ${#_positionals[@]} -ge 1 || _PRINT_HELP=yes die "${error_msg}" 1
  error_msg="$(echo "FATAL ERROR: There were spurious positional arguments" \
    "--- we expect exactly 1 (namely: $_required_args_string), but got" \
    "${#_positionals[@]} (the last one was: '${_positionals[*]: -1}').")"
  test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "${error_msg}" 1
}

assign_positional_args ()
{
  _positional_names=('_arg_mjkey_path' )

  for (( ii = 0; ii < ${#_positionals[@]}; ii++))
  do
    error_msg="$(echo "Error during argument parsing, possibly an Argbash" \
      "bug.")"
    eval "${_positional_names[ii]}=\${_positionals[ii]}" || \
      die "${error_msg}" 1
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args
### END OF CODE GENERATED BY Argbash (sortof) ### ])

# Verify there's a file in the mjkey path
test -f "${_arg_mjkey_path}" || _PRINT_HELP=yes die \
  "The path ${_arg_mjkey_path} of the MuJoCo key is not valid." 1

# Make sure that we're under the garage directory
GARAGE_DIR="$(readlink -f $(dirname $0)/..)"
cd "${GARAGE_DIR}"

# File where environment variables are stored
BASH_RC="${HOME}/.bashrc"

# Install dependencies
printf "Installing garage dependencies\n"
printf "You will probably be asked for your sudo password\n"
sudo apt-get -y -q update
# To install garage
sudo apt-get install -y \
  wget \
  bzip2 \
  unzip \
  git
# For building glfw
sudo apt-get install -y \
  cmake \
  xorg-dev
# mujoco_py
# See https://github.com/openai/mujoco-py/blob/master/Dockerfile
# 16.04 repo is too old, install glfw from source instead of libglfw3
sudo apt-get install -y \
  libglew-dev \
  patchelf \
  libosmesa6-dev
# OpenAI gym
# See https://github.com/openai/gym/blob/master/Dockerfile
sudo apt-get install -y \
  libpq-dev \
  ffmpeg \
  libjpeg-dev \
  swig \
  libsdl2-dev
# OpenAI baselines
sudo apt-get install -y \
  libopenmpi-dev \
  openmpi-bin
sudo apt-get clean
sudo rm -rf /var/lib/apt/lists/*

# Build GLFW because the Ubuntu 16.04 version is too old
# See https://github.com/glfw/glfw/issues/1004
apt-get purge -y -v libglfw*
git clone https://github.com/glfw/glfw.git
cd glfw
git checkout 0be4f3f75aebd9d24583ee86590a38e741db0904
mkdir glfw-build
cd glfw-build
cmake -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF \
  -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF ..
make -j"$(nproc)"
make install
cd ../../
rm -rf glfw

# Set up MuJoCo
if [[ ! -f "${HOME}"/.mujoco/ ]]; then
  mkdir "${HOME}"/.mujoco
  wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip
  unzip mujoco.zip -d "${HOME}"/.mujoco
  rm mujoco.zip
else
  printf '\e[0;31m%s\e[0m\n' "Mujoco is already installed!"
fi
# Configure MuJoCo as a shared library
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${HOME}/.mujoco/mjpro150/bin"
LD_LIB_ENV_VAR="LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${HOME}/.mujoco"
LD_LIB_ENV_VAR="${LD_LIB_ENV_VAR}/mjpro150/bin\""
if [[ "${_arg_set_envvar}" = on ]]; then
  printf "\\n# Added by the garage installer\\n" >> "${BASH_RC}"
  printf "export ${LD_LIB_ENV_VAR}\\n" >> "${BASH_RC}"
fi

# Set up conda
hash conda 2>/dev/null || {
  wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh \
    -O miniconda.sh
  sudo bash miniconda.sh -b -p /opt/conda
  rm miniconda.sh
  sudo ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
}
# Add conda to executable programs
export PATH="$PATH:/opt/conda/bin"
PATH_ENV_VAR="PATH=\"\$PATH:/opt/conda/bin\""
if [[ "${_arg_set_envvar}" = on ]]; then
  printf "\\n# Added by the garage installer\\n" >> "${BASH_RC}"
  printf "export ${PATH_ENV_VAR}\\n" >> "${BASH_RC}"
fi
conda update -q -y conda

# Create conda environment
conda env create -f environment.yml
if [[ "${?}" -ne 0 ]]; then
  printf '\e[0;31m%s\e[0m\n' "Error: conda environment could not be created"
  exit 1
fi
sudo rm -rf /opt/conda/pkgs/*

# Extras
source activate garage
# Prevent pip from complaining about available upgrades
pip install --upgrade pip
# TensorFlow is not in environment.yml because of CPU vs GPU
# Remove any TensorFlow installations before installing the desired flavor
pip uninstall -y tensorflow tensorflow-gpu
if [[ "${_arg_tf_gpu}" = on ]]; then
  pip install tensorflow-gpu
else
  pip install tensorflow
fi
# Fix Box2D install
# See https://github.com/openai/gym/issues/100
# See https://github.com/pybox2d/pybox2d/issues/82
pip uninstall -y Box2D Box2D-kengz box2d-py
pip install Box2D
# We need a MuJoCo key to import mujoco_py
cp ${_arg_mjkey_path} "${HOME}"/.mujoco/mjkey.txt
python -c 'import mujoco_py'
# Set up pre-commit in local repo
pre-commit install -t pre-commit
pre-commit install -t pre-push
pre-commit install -t commit-msg
source deactivate

# Add garage to python modules
export PYTHONPATH="$PYTHONPATH:${GARAGE_DIR}"
PYTHON_ENV_VAR="PYTHONPATH=\"\$PYTHONPATH:${GARAGE_DIR}\""
if [[ "${_arg_set_envvar}" = on ]]; then
  printf "\\n# Added by the garage installer\\n" >> "${BASH_RC}"
  printf "export ${PYTHON_ENV_VAR}\\n" >> "${BASH_RC}"
else
  printf "Remember to export the following environment variables before "
  printf "running garage:\n"
  printf "${LD_LIB_ENV_VAR}\n"
  printf "${PATH_ENV_VAR}\n"
  printf "${PYTHON_ENV_VAR}\n"
  printf "You may wish to edit your .bashrc to prepend the exports of these "
  printf "environment variables.\n"
fi

echo "Garage is installed! To make the changes take effect, close and then" \
  "re-open the terminal. Also, make sure to run \`source activate garage\`" \
  "whenever you open a new terminal and want to run programs under garage."
