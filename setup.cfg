[flake8]
# List of Error Codes
# INDENTATION
# E125 continuation line with same indent as next logical line
# E128 continuation line under-indented for visual indent
# TABS
# E101 indentation contains mixed spaces and tabs
# W191 indentation contains tabs
# MAXIMUM LINE LENGTH
# E501 line too long
# BLANK LINE
# E301 expected 1 blank line, found 0
# E302 expected 2 blank lines, found 0
# E303 too many blank lines (2)
# IMPORTS
# E401 multiple imports on one line
# I100 import statements are in the wrong order
# I101 the names in from import are in the wrong order
# I201 missing newline between import groups
# I202 additional newline in a group of imports
# WHITESPACE IN EXPRESSION AND STATEMENTS
# E201 whitespace after '(', '[' or '{'
# E202 whitespace before ')', ']' or '}'
# E203 whitespace before ':', ';' or ','
# E211 whitespace before '(' or '['
# E221 multiple spaces before operator
# E225 missing whitespace around operator
# E226 missing whitespace around arithmetic operator
# E231 missing whitespace after ':'
# E241 multiple spaces after ','
# E251 unexpected spaces around keyword / parameter equals
# E701 multiple statements on one line (colon)
# E702 multiple statements on one line (semicolon)
# W291 trailing whitespace
# COMMENTS
# E261 at least two spaces before inline comment
# E262 inline comment should start with '# '
# NAMING CONVENTIONS
# Names to avoid
# E741 do not use variables named ‘l’, ‘O’, or ‘I’
# E742 do not define classes named ‘l’, ‘O’, or ‘I’
# E743 do not define functions named ‘l’, ‘O’, or ‘I’
# The following error code enables all the error codes for naming conventions
# defined here:
# https://github.com/PyCQA/pep8-naming
# If one of the errors needs to be ignored, just add it to the ignore variable.
# N
# DOCSTRING
# The following error code enables all the error codes for docstring defined
# here:
# http://pep257.readthedocs.io/en/latest/error_codes.html
# If one of the errors needs to be ignored, just add it to the ignore variable.
# D
# PROGRAMMING RECOMMENDATIONS
# E711 comparisons to None should always be done with is or is not, never the
#      equality operators.
# E712 comparison to True should be 'if cond is True:' or 'if cond:'
# E714 use is not operator rather than not ... is.
# E721 do not compare types, use 'isinstance()'
# E722 do not use bare except, specify exception instead.
# E731 do not assign a lambda expression, use a def.
select = E101,W191,E201,E202,E241,E211,E221,W291,E702,E714,E125,E128,E501,
         E301,E302,E303,E401,I100,I101,I201,I202,E203,E225,E226,E251,E231,
         E701,E261,E262,E741,E742,E743,N,D,E711,E712,E721,E722,E731
# BREAK BEFORE BINARY OPERATOR
# W503 enforces the break after the operator, which is acceptable, but it's
# preferred to do it before the operator. Since YAPF enforces the preferred
# style, this rule is ignored.
ignore = W503
import-order-style = google
application-import-names = sandbox,garage,examples,tests

[pylint]
#[MESSAGES CONTROL]
msg-template = {path}:{msg_id}:{line:3d},{column}: {msg}
disable = all
# C0326 Exactly one space required around keyword argument assignment
# C1801 Do not use `len(SEQUENCE)` to determine if a sequence is empty
# E0602 Undefined-variable
# E0603 Undefined-all-variable
# W0601 Global-variable-undefined
# W0611 Unused import %s
# R1710 Either all return statements in a function should return an expression,
#       or none of them should.
enable = C0326,C1801,E0602,E0603,W0601,W0611,R1710

[unittest]
plugins = nose2.plugins.attrib
          nose2.plugins.layers

[yapf]
based_on_style = pep8
allow_multiline_lambdas = true
