"""Interface of Meta-RL ALgorithms."""
import abc

from garage.np.algos import RLAlgorithm


class MetaRLAlgorithm(RLAlgorithm, abc.ABC):
    """Base class for Meta-RL Algorithms."""

    @abc.abstractmethod
    def get_exploration_policy(self):
        """Return a policy used before adaptation to a specific task.

        Each time it is retrieved, this policy should only be evaluated in one
        task.

        Returns:
            garage.Policy: The "un-adapted" policy.

        """

    @abc.abstractmethod
    def adapt_policy(self, exploration_policy, trajectories):
        """Produce a policy adapted for a task.

        Args:
            exploration_policy (garage.Policy): The policy used to explore the
                environment. Must not be used after this method is called.
            trajectories (garage.TrajectoryBatch): Trajectories to adapt to,
                generated by exploration_policy exploring the environment.

        Returns:
            garage.Policy: The adapted policy.

        """
